{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","user","firstname","lastname","App","React","createElement","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","kwadrat","high","width","this","liczPole","Square","props","onClick","value","calculateWinner","squeres","lines","i","length","a","b","c","log","pole","Board","state","Array","fill","xIsNext","slice","setState","handleClick","winner","status","alert","renderSquare","Component","Game"],"mappings":"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","file":"static/js/main.c1b81adb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nfunction formatUser() {\nreturn user.firstname + \" \" + user.lastname;\n}\n\nconst user = {\n  firstname: \"figi \",\n  lastname:\" lodo\"\n};\nfunction list()\n{\nreturn React.createElement('div', {className: 'shopping-list'},\n  React.createElement('h1','dogo'),\n  React.createElement('ul', 'cato'),\n);\n}\nfunction App() {\n  return (\n<div>\n  <h1>hello, {formatUser(user)}</h1>\n  <div> {list()}</div>\n\n\n\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nclass Prostokat {\n  constructor(high, width) {\n    this.high = high;\n    this.width = width;\n  }\n  get pole() {\n    return this.liczPole()\n  }\n  liczPole() {\n    return this.high * this.width;\n  }\n\n}\nconst kwadrat = new Prostokat(10, 300 )\nconsole.log(kwadrat.pole);\n\n\nfunction Square(props) {\n  return  (\n    <button className=  \"square\" onClick= {props.onClick}>\n      {props.value}\n    </button>\n\n  );\n}\nfunction calculateWinner(squeres) {\n  const lines = [\n    [0, 1,  2],\n    [3, 4,  5],\n    [6, 7,  8],\n    [0, 3,  6],\n    [1, 4,  7],\n    [2, 5,  8],\n    [0, 4,  8],\n    [2, 4,  6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const  [a, b,  c] = lines[i];\n    if (squeres[a] && squeres[a] === squeres[b] &&  squeres[a]  === squeres[c]) {\n      return squeres[a];\n    }\n  }\n  return null;\n}\n\nclass Board extends React.Component {\n  constructor(props){\n    super(props);\n    this.state  = {\n      squeres:  Array(9).fill(null),\n      xIsNext: true,\n    };\n  }\n  handleClick(i) {\n    const squeres = this.state.squeres.slice();\n    if(calculateWinner(squeres) ||  (squeres[i])){\n      return;\n    }\n    squeres[i] = this.state.xIsNext  ?  'X'  : \"O\";\n    this.setState({\n      squeres: squeres,\n      xIsNext:  !this.state.xIsNext,\n    });\n  }\n\n  renderSquare(i) {\n    return(\n     <Square\n    value={this.state.squeres[i]}\n    onClick={()  =>  this.handleClick(i)}\n    />);\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squeres);\n    let status =  \" \";\n    if(winner){\n     status = 'wygrywa ' + winner;\n     alert('wygrywa ' + winner);\n    }\n    else {\n    status = \"nastepny gracz  \" + (this.state.xIsNext? 'X' : 'O');\n    }\n\n    return (\n      <div>\n        <h1 className=\"title\">TIC TAC TOE</h1>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}